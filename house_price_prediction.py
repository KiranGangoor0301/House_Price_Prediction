# -*- coding: utf-8 -*-
"""House Price Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LPeyQRWCdbDMpWP9ItzyF_tpRA5wZkn5
"""

import sklearn

import seaborn as sns

import pandas as pd

df = pd.read_csv("BostonHousing.csv")

data=pd.DataFrame(df)

data

X=data.iloc[:,0:-1]

X

y=data.iloc[:,-1]

y

data.shape

data.info()

data.describe()

data.isnull().sum()

sns.pairplot(data,height=2.5,diag_kind='kde')

sns.distplot(data["medv"])

print("Skewness is = {}".format(data['medv'].skew()))
print("Kurtosis is = {}".format(data['medv'].kurt()))

import matplotlib.pyplot as plt

sns.scatterplot(x=data['crim'],y=data['medv'])
plt.show()

sns.scatterplot(x=data['age'],y=data['medv'])
plt.show()

import scipy

from scipy import stats
from scipy.stats import norm ,skew

sns.distplot(data['medv'],fit=norm)
(mu,sigma)=norm.fit(data['medv'])
print("mu:{} and sigma:{}".format(round(mu,2),round(sigma,2)))
plt.legend(["Normal Distance=(mu:{} sigma:{})".format(round(mu,2),round(sigma,2))],loc='best')

fig = plt.figure()
res = stats.probplot(data['medv'], plot=plt)
plt.show()

import numpy as np
data['medv']=np.log1p(data['medv'])
sns.distplot(data['medv'],fit=norm)
(mu,sigma)=norm.fit(data['medv'])
print("mu:{} and sigma:{}".format(round(mu,2),round(sigma,2)))
plt.legend(["Normal Distance=(mu:{} sigma:{})".format(round(mu,2),round(sigma,2))],loc='best')
print("Skewness is = {}".format(data['medv'].skew()))
print("Kurtosis is = {}".format(data['medv'].kurt()))

fig = plt.figure()
res = stats.probplot(data['medv'], plot=plt)
plt.show()

plt.figure(figsize=(10,10))
cor=data.corr()
sns.heatmap(cor,annot=True,cmap=plt.cm.PuBu)
plt.show()

cor_target=abs(cor['medv'])
relevant_features=cor_target[cor_target>0.2]
names=[index for index,value in relevant_features.iteritems()]
names.remove('medv')
print(names)
print(len(names))

from sklearn.model_selection import train_test_split
x=data.drop('medv' , axis=1)
y=data['medv']
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

from sklearn.linear_model import LinearRegression

lr=LinearRegression()

lr.fit(X_train,y_train)

predictions=lr.predict(X_test)
print('Actual value of the House is = {}'.format(y_test[0]))
print('Predicted value of the House is = {}'.format(predictions[0]))

from sklearn.metrics import mean_squared_error
mse=mean_squared_error(y_test,predictions)
rmse=np.sqrt(mse)
print(mse)

